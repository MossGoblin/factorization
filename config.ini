# LOGGER SETTINGS
[logger]
# logging mode
# options: file, console, full (full = console & file)
mode = full

# pattern for the name of the log file
# log_file_name_string = {mode}_{set_profile}_{timeframe}.ini
file_name_string = log.ini

# base folder for log files (none for root folder)
base_folder = logging

# if true, all previous .log files are removed in each run
reset_files = true

# logger formatting
format = %%(asctime)s - %%(name)s - [%%(levelname)-5s] %%(message)s

# logger level
# options:
# CRITICAL  50
# ERROR     40
# WARNING   30
# INFO      20
# DEBUG     10
# NOTSET    0
level = 10


# NUMBER SET PARAMETERS
[set]
# mode of number generation
# options: family, range, file
mode = family

# family mode: generates a number of families; each family is based on a family product and a number of identity factors
# list of families to be generated
families = [[2, 2], [3, 5]]

# identity factor iteration mode: range or count
# count: the number of identity factors in each family (determines the family size)
identity_factor_mode = count

# range: the identity factors in a family are between identity_factor_range_min and identity_factor_range_max
identity_factor_range_min = 2
identity_factor_range_max = 1000

# type of identity factor minimum
# options: origin, family, value
# origin: first identity factor is 2
# family: first identity factor is the lowest prime smaller than the largest family factor []
# value: first family factor is the lowest prime above a specific value
identity_factor_minimum_mode = family

# the value of the first identity factor if identity_factor_minimum_mode is set to 'value'
identity_factor_minimum_value = 2

# identity factor count: the number of identity factors in a family
identity_factor_count = 1000

# range mode: generates a range of consecutive numbers
# whether prime numbers should be included in the range or skipped
include_primes = false

# range minimum and maximum: first and last numbers to be included in the range
range_min = 2
range_max = 1000

# file mode: read the numbers from previously generated .csv file
csv_file_name = input.csv


# GRAPH PARAMETERS
[graph]
width = 1600
height = 900
point_size = 5

# value to be visualized on the Y-axis
# options: mean_deviation, antislope, ideal_factor
mode = mean_deviation

# whether the numbers should be colored by slope buckets
# options: true, false
use_color_buckets = true

# bokeh palette to be used if use_color_buckets is set to true
# options: Magma, Inferno, Plasma, Viridis, Cividis, Turbo, Default
# Default = Turbo
# preview: https://docs.bokeh.org/en/latest/docs/reference/palettes.html
palette = Default


# RUN PARAMETERS
[run]
# create a csv file with the generated number data
create_csv = true

# information included in the timestamp of the 'hard copy' file name (for the same number range)
# .. affects the number of files produced when multiple consecutive runs are made
# .. ex. date will re-write one file during the day
# .. full will create new file for each run
# options:
# 0 = date only - day month year
# 1 = down to hour information, day month year hour
# 2 = down to minute information, day month year hour minute
# 3 = full timestamp, day month year hour minute second
hard_copy_timestamp_granularity = 0

# if true, the files in the output folder will be removed before each run
# options: true, false
reset_output_data = false